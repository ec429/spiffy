Spiffy: Yet another ZX Spectrum emulator
Ideas & Future Plans

CORE:

DEBUGGER:
Make memory addresses, literals in debugger allow an extended format that handles eg. locations in peripheral memory, computed addresses, sysvars, &c.  See under `DPRINT'.
Disabled & single-shot breakpoints.
Funky breakpoints in debugger: break on memory read/write in range, port read/write in range (or matching bits), execution of RET, RETurn from current function (effectively just single-shot (SP) read trap).
Breakpoint conditions, like Tstate count, register-has-value, memory-location-has-value.  Allow conditions to be ANDed together (eg. Break on port read !A0 while Tstate between foo and bar and regB nonzero).
Arguments to t[race] interpreted like m r, with the semantics of gdb 'display'.
Command to refresh (ie. SDL_Flip()) the screen.
Macros.
Attaching macros (and single commands?) to breakpoints (on this breakpoint, run that macro).
Search for JP/CALL/JR to an address.
Search for literal NN in LD.
Search for [NN] in LD.

UI:
Debugger frontend harness: user-friendly debugger frontends (curses?  GUI?)

DPRINT:
Examples:
	.b,8ccc            - byte at 0x8ccc.
	.f,dead            - 5-byte float at 0xdead.
	.w,@VARS           - word at VARS.
	.8,+,.w,@CHARS,118 - 8 bytes from 280 bytes after the address pointed to by CHARS (0x5c36).
	.b,+,#IX,25        - byte at IX+0x25.
	=,.b,#DE,.b,#HL    - copies a byte from [HL] to [DE], and prints the byte copied.
	.b,:AY:5           - byte from AY register 5.  (However, the 'a' (and 'u') commands will be kept as they perform decoding of these values).
	>>,#A,1            - value of A, shifted right once (logical shift, not arithmetic shift)
	<<<,#A,3           - value of A, rotated left three times
Syntax:
<expression> ::= <unop>','<expression> | <binop>','<expression>','<expression> | <sysvar> | <register> | <literal> | <indirection>
<unop>       ::= '~'
<binop>      ::= '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>>' | '<<<' | '>>>' | '='
<indirection>::= '.'<type>','<expression> | '.'<type>','':'<far>':'<expression>
<type>       ::= 'b' | 'w' | 'f' | '8' | 'R'
<far>        ::= 'AY' | 'ULAPLUS'
<sysvar>     ::= '@'<sysvarname>
<register>   ::= '#'<registername>
<literal>    ::= <hex-literal> | <float-lit>
<hex-literal>::= <xdigit>*{1,4}
<float-lit>  ::= '_'<float-val>'_'
