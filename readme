Spiffy: Yet another ZX Spectrum emulator
Readme.

Spiffy is currently in a fairly early stage of development; the Z80 core works (and passes the Fuse coretests), but of peripherals only video, audio, the keyboard and tape input been added.
Also, timings and contention are probably inaccurate.  In particular, the 'split bus' is not properly emulated, chiefly because I don't understand it.  (I need to read csmith's book!)

UI controls:
The UI is a bit spartan right now.  There are three rows of controls: Tape, Audio and Misc.
Tape:
	Speed readout.  Should hover around 100%.
	Tape traps (toggle).  White=on, dark gray=off.  Enables trapping of LD-EDGE-1 in the ROM tape loader, for fast tape loading.
	Play (green).  When tape is playing, turns pink.
	Skip (dark blue).  Skips to next tape block.
	Stop at end of block (toggle).  Lilac=on, dark red=off.  When enabled, the tape will be stopped at the end of each block.  Handy for multiload tapes.
	Rewind (magenta).  Rewinds the tape to the beginning.
	Tape counter.  Only really useful when tape traps are disabled, in which case it displays the number of seconds remaining in the current block.
Audio:
	Record audio (toggle).  Red, brighter when active.  Records the filtered beeper audio to "record.wav".  (Note: you can't use this to save tapes.  Right now there is no way to save tapes in Spiffy)
	BW: controls the filter bandwidth.  Left-click changes by increments of 1; right-click doubles or halves.  Try 38, 51 or 76 for most beeper engines.
	SR: controls sinc_rate, the oversampling ratio.  Higher values improve audio but use more CPU.  12 should be plenty.
Misc:
	Pause (toggle).  Gold=unpaused, orange=paused.  Pauses the emulation.
	Reset (orange).  Resets the Spectrum (at the moment, simply sets the PC to 0).

Notable features of Spiffy's design:
The Z80 emulation (and main loop) operates at a 1-Tstate resolution, making accurate timing theoretically easy to implement.
The main bus (A0-A15, D0-D7, /MREQ, /IORQ, /RD, /WR, /M1, /RFSH, /WAIT) is fully populated with the correct control signals; for instance all memory reads from the Z80 are actually performed by asserting the bus, then reading D0-D7 on the next Tstate.  In other words, the communication between the Z80 and other 'virtual chips' is confined entirely to the virtual bus.  This should make the implementation of peripherals a simple matter.

Pitfalls to beware of:
In debugging information, Spiffy refers to M-cycles, but be warned!  These do not match up to official documentation.  The opcode fetch cycle (usually M1) is notated M0; subsequent M-cycles are similarly reduced by one.  Prefixes are considered to be an extra M0.  Single-cycle operations consist of two Spiffy M-cycles, M0 (opcode fetch, 4T) and M1 (internal operation, 0-2T).  Also, some cleverness is practiced with the 'dT' counter (that is, Tstate within this M-cycle) - it is often set to a negative value and the M counter incremented early, when an M-cycle has finished processing before its allotted Tstates are up.  Generally debugging information should always be interpreted with reference to the source code, rather than to one's expectations of the normal behaviour of a Z80 or to common conventions used to document said behaviour.

License:
Spiffy is copyright (c)Edward Cree, 2010-11, and licensed under the GNU GPL v3+.  (You should have received a copy of the GPL with this software, in the file 'COPYING')
The ZX Spectrum ROM images (currently just 48.rom) are copyright Amstrad Plc.  Amstrad have kindly given their permission for the redistribution of their copyrighted material but retain that copyright (see http://www.worldofspectrum.org/permits/amstrad-roms.txt).
Any software (or software images) you run using this emulator remain the property of their respective owners.
